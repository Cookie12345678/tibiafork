name: Update Issue on Merge

on:
  pull_request:
    types:
      - closed
    paths:
      - 'npc/**'

jobs:
  update_issue:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PyGithub

    - name: Update issue
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ISSUE_NUMBER: 51
      run: |
        python -c "import os, json, re
        from github import Github
        token = os.environ.get('GITHUB_TOKEN')
        issue_number = int(os.environ.get('ISSUE_NUMBER'))
        repo_name = os.environ.get('GITHUB_REPOSITORY')
        pr_event_path = os.environ.get('GITHUB_EVENT_PATH')
        with open(pr_event_path, 'r') as f:
            pr_data = json.load(f)
        g = Github(token)
        repo = g.get_repo(repo_name)
        issue = repo.get_issue(number=issue_number)
        pr_number = pr_data['pull_request']['number']
        pr = repo.get_pull(pr_number)
        pr_opener = pr.user.login
        pr_title = pr.title
        pr_files = [f.filename for f in pr.get_files() if f.filename.startswith('npc/')]
        if not pr_files:
          exit(0)
        pr_url = pr.html_url
        existing_comment = None
        contributions = {}
        for comment in issue.get_comments():
          if '### Contributions Table' in comment.body:
            existing_comment = comment
            contributions = {m[0]: int(m[1]) for m in re.findall(r'\| (\S+) \|\S+\| \S+ \| (\d+) \|', comment.body)}

        if pr_opener in contributions:
          contributions[pr_opener] += 1
        else:
          contributions[pr_opener] = 1

        table = f'### Contributions Table\n\n| Opener | Changed File | PR Link | Count |\n| --- | --- | --- | --- |\n'
        for opener, count in contributions.items():
          for f in pr_files:
            file_url = f'https://github.com/{repo_name}/blob/main/{f}'
            table += f'| {opener} | [{f}]({file_url}) | [{pr_title}]({pr_url}) | {count} |\n'

        if existing_comment:
          existing_comment.edit(table)
        else:
          issue.create_comment(table)"


