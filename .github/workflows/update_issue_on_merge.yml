name: Update Issue on Merge

on:
  pull_request:
    types:
      - closed
    paths:
      - 'npc/**'

jobs:
  update_issue:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PyGithub

    - name: Update issue
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ISSUE_NUMBER: 51
      run: |
        python -c "import os, json, requests
        from github import Github
        token = '${{ secrets.GITHUB_TOKEN }}'
        issue_number = int('${{ github.event.issue.number }}')
        repo_name = '${{ github.repository }}'
        pr_event_path = '${{ github.event_path }}'
        discord_webhook_url = '${{ secrets.DISCORD_WEBHOOK_URL }}'
        with open(pr_event_path, 'r') as f:
            pr_data = json.load(f)
        g = Github(token)
        repo = g.get_repo(repo_name)
        issue = repo.get_issue(number=issue_number)
        pr_number = pr_data['number']
        pr = repo.get_pull(pr_number)
        pr_opener = pr.user.login
        pr_title = pr.title
        pr_files = [f.filename for f in pr.get_files() if f.filename.startswith('npc/') and '_EMPTY.txt' not in f.filename]
        if not pr_files:
            exit(0)
        pr_url = pr.html_url
        existing_comment = None
        for comment in issue.get_comments():
            if '### Contributions Table' in comment.body:
                existing_comment = comment
                break
        existing_table = existing_comment.body.split('\n')[3:] if existing_comment else []
        new_entries = []
        for f in pr_files:
            file_url = f'https://github.com/{repo_name}/blob/main/{f}'
            existing_contributions = [line for line in existing_table if f'| {pr_opener} |' in line]
            if existing_contributions:
                count = sum([1 for line in existing_contributions if f'| {pr_opener} |' in line]) + 1
                updated_entry = f'| {pr_opener} | [{f}]({file_url}) | [{pr_title}]({pr_url}) | {count} |'
                existing_table.append(updated_entry)
            else:
                count = 1
                entry = f'| {pr_opener} | [{f}]({file_url}) | [{pr_title}]({pr_url}) | {count} |'
                new_entries.append(entry)
        table = f'### Contributions Table\n\n| Opener | Changed File | PR Link | Count |\n| --- | --- | --- | --- |\n'
        table += '\n'.join(existing_table + new_entries).rstrip()
        if existing_comment:
            existing_comment.edit(table)
        else:
            issue.create_comment(table)
        for f in pr_files:
            file_url = f'https://github.com/{repo_name}/blob/main/{f}'
            discord_message = {
                'content': f'**{pr_opener}** has updated the issue with a new contribution:\nFile: [{f}]({file_url})\nPR: [{pr_title}]({pr_url})'
            }
            requests.post(discord_webhook_url, json=discord_message)"








